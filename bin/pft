#!/usr/bin/env node

/** Globals */
var phantomjs = require('phantomjs');
var path = require('path');
var cwd = path.resolve(process.cwd(), '.');
var glob = require('glob');
var spawn = require('child_process').spawn;
var errors = 0;
var runningThreads = 0;
var startTime = new Date().getTime();

function parseInputArgs (inputArgs) {
    var debug = false;
    var threads = 1;
    var scripts = [];
    if (inputArgs.length < 2) {
        console.log('ERROR: invalid number of arguments: "' + inputArgs.join(' ') + '"');
        process.exit(1);
    }
    for (var i=2; i<inputArgs.length; i++) {
        var arg = process.argv[i];
        if (arg == "--debug") {
            debug = true;
        } else if (arg.indexOf("--parallel=") > -1) {
            threads = parseInt(arg.substring(arg.indexOf("=") + 1), 10);
        } else {
            // process wildcard paths into actual files
            var p = path.join(cwd, arg);
            scripts.push(p);
        }
    }
    if (threads > 1) {
        debug = false; // cannot debug in parallel mode
    }

    return { debug: debug, threads: threads, scripts: scripts };
}

function processScriptFilePath (options) {
    var threads = options.threads,
        scripts = new Array(threads),
        i;
    for (i=0; i<scripts.length; i++) {
        scripts[i] = [];
    }
    var s = 0;
    for (i=0; i<options.scripts.length; i++) {
        var script = options.scripts[i];
        var files = glob.sync(script);
        for (var j=0; j<files.length; j++) {
            scripts[s++].push(files[j]);
            if (s >= threads) {
                s = 0;
            }
        }
    }

    return scripts;
}

function generatePhantomArgs (options) {
    var wrapper = path.join(__dirname, '..', 'lib', 'wrapper.js');
    var pft = path.join(__dirname, '..', 'dist', 'pft.js');
    var phantomArgs = ['--ignore-ssl-errors=yes','--ssl-protocol=any'];
    if (options.debug) {
        phantomArgs.push("--remote-debugger-port=9999");
    }
    phantomArgs.push(wrapper);
    phantomArgs.push(require.resolve('mutexjs'));
    phantomArgs.push(pft);

    return phantomArgs;
}

function startProcesses (options, phantomArgs, scriptsArray) {
    var phantoms = [];
    var command = phantomjs.path;
    /* jshint loopfunc:true */
    for (var i=0; i<options.threads; i++) {
        var args = [],
            j;
        for (j=0; j<phantomArgs.length; j++) {
            args.push(phantomArgs[j]);
        }
        var scripts = scriptsArray[i];
        for (j=0; j<scripts.length; j++) {
            args.push(scripts[j]);
        }

        runningThreads++;
        if (options.threads > 1) {
            args.push('PFT_THREAD_ID_' + (i + 1));
        }

        // Spawn the Phantom thread
        var phantom = spawn(command, args, {cwd: cwd});

        // add a 'data' event listener for the spawned instance
        phantom.stdout.on('data', function(data) {
            console.log(data.toString());
        });
        phantom.on('error', function(err) {
            errors++;
            console.log(err);
            runningThreads--;
            if (runningThreads === 0) {
                process.exit(1);
            }
        });
        phantom.on('exit', function(code) {
            if (code !== 0) {
                errors += code;
            }
            var exitCode = (errors > 0) ? errors : code;
            runningThreads--;
            if (runningThreads === 0) {
                if (options.threads > 1) {
                    console.log("All threads completed with total of '" + errors + "' failures / errors in: " + convertMsToHumanReadable(new Date().getTime() - startTime));
                }
                process.exit(exitCode);
            }
        });

        phantoms.push(phantom);
    }

    return phantoms;
}

function convertMsToHumanReadable (milliseconds) {
    var date = new Date(milliseconds);
    var h = date.getHours();
    var m = date.getMinutes();
    var s = date.getSeconds();
    var ms = date.getMilliseconds();
    var out = "";

    if(h > 0) {
        out+=h;
        if(h==1) {
            out+=" hour ";
        } else {
            out+=" hours ";
        }
    }
    if(m > 0) {
        out+=m;
        if(m==1) {
            out+=" minute ";
        } else {
            out+=" minutes ";
        }
    }
    if(s > 0) {
        out+=s;
        if(s==1) {
            out+=" second ";
        } else {
            out+=" seconds ";
        }
    }
    if(ms > 0) {
        out+=ms;
        if(ms==1) {
            out+=" millisecond";
        } else {
            out+=" milliseconds";
        }
    }

    return out;
}

var options = parseInputArgs(process.argv);
var phantomArgs = generatePhantomArgs(options);
var scriptsArray = processScriptFilePath(options);
var processes = startProcesses(options, phantomArgs, scriptsArray);
